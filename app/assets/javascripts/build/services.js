// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module("kodiRemote.services", []);

  app.service("Topbar", [
    function() {
      var service;
      service = {
        title: null,
        link: null,
        addTitle: function(title) {
          return this.title = title;
        },
        addLink: function(url, label) {
          return this.link = {
            url: url,
            label: label
          };
        },
        reset: function() {
          this.title = null;
          return this.link = null;
        }
      };
      return service;
    }
  ]);

  app.service("Remote", [
    "SERVER", "PORT", "$q", "$http", function(SERVER, PORT, $q, $http) {
      var methodRequest, perPage, request, service;
      request = function(payload) {
        var deferred, error, success;
        deferred = $q.defer();
        success = function(response) {
          if (!response.data) {
            deferred.reject(response);
          }
          if (response.data.error) {
            deferred.reject(response.data.error);
          }
          deferred.resolve(response.data.result);
        };
        error = function(response) {
          deferred.reject(response);
        };
        $http.post("http://" + SERVER + ":" + PORT + "/jsonrpc", payload).then(success, error);
        return deferred.promise;
      };
      methodRequest = function(method, params) {
        var payload;
        if (params == null) {
          params = {};
        }
        payload = {
          jsonrpc: "2.0",
          method: method,
          id: 1
        };
        if (params) {
          payload.params = params;
        }
        return request(payload);
      };
      perPage = 10;
      service = {
        videoLibrary: {
          tvShows: {
            index: function(page) {
              var params;
              if (page == null) {
                page = 1;
              }
              params = {
                properties: ["plot", "year", "rating", "genre", "art"],
                sort: {
                  order: "ascending",
                  method: "label"
                },
                limits: {
                  start: (page - 1) * perPage,
                  end: page * perPage
                }
              };
              return methodRequest("VideoLibrary.GetTVShows", params);
            },
            show: function(tvShowId) {
              return methodRequest("VideoLibrary.GetTVShowDetails", {
                tvshowid: tvShowId
              });
            },
            search: function(query) {
              var params;
              params = {
                properties: ["plot", "year", "rating", "genre", "art"],
                filter: {
                  field: "title",
                  operator: "contains",
                  value: query
                }
              };
              return methodRequest("VideoLibrary.GetTVShows", params);
            },
            seasons: {
              index: function(tvShowId) {
                var params;
                params = {
                  tvshowid: tvShowId
                };
                return methodRequest("VideoLibrary.GetSeasons", params);
              },
              episodes: {
                index: function(tvShowId, seasonId) {
                  var params;
                  params = {
                    tvshowid: tvShowId,
                    season: seasonId,
                    properties: ["title", "plot", "rating", "runtime", "art", "thumbnail"]
                  };
                  return methodRequest("VideoLibrary.GetEpisodes", params);
                }
              }
            }
          },
          movies: {
            get: function() {
              var params;
              params = {
                properties: ["plot", "year", "rating", "genre", "art", "tagline", "runtime"],
                sort: {
                  order: "ascending",
                  method: "label"
                },
                limits: {
                  start: 0,
                  end: 10
                }
              };
              return methodRequest("VideoLibrary.GetMovies", params);
            }
          }
        }
      };
      return service;
    }
  ]);

}).call(this);
