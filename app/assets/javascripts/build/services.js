// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module("kodiRemote.services", []);

  app.service("Topbar", [
    function() {
      var service;
      service = {
        item: null,
        setTitle: function(title) {
          return this.item = {
            type: "title",
            title: title
          };
        },
        setLink: function(url, label) {
          return this.item = {
            type: "link",
            url: url,
            label: label
          };
        }
      };
      return service;
    }
  ]);

  app.service("KodiRequest", [
    "$q", "$http", function($q, $http) {
      var methodRequest, perPage, request, service;
      request = function(payload) {
        var deferred, error, success;
        deferred = $q.defer();
        success = function(response) {
          if (!response.data) {
            deferred.reject(response);
          }
          if (response.data.error) {
            deferred.reject(response.data.error);
          }
          deferred.resolve(response.data.result);
        };
        error = function(response) {
          console.debug(error(response));
          deferred.reject(response);
        };
        $http.post("http://" + kodiRemote.settings.server + ":" + kodiRemote.settings.port + "/jsonrpc", payload).then(success, error);
        return deferred.promise;
      };
      methodRequest = function(method, params) {
        var payload;
        if (params == null) {
          params = {};
        }
        payload = {
          jsonrpc: "2.0",
          method: method,
          id: 1
        };
        if (params) {
          payload.params = params;
        }
        return request(payload);
      };
      perPage = 10;
      service = {
        methodRequest: methodRequest
      };
      return service;
    }
  ]);

  app.service("Request", [
    "$q", "$http", function($q, $http) {
      var fetch;
      fetch = function(method, resultHandler, params) {
        var deferred, error, payload, success;
        payload = {
          jsonrpc: "2.0",
          method: method,
          id: 1,
          params: params
        };
        deferred = $q.defer();
        success = function(response) {
          var returnData, total;
          if (!response.data) {
            error(response);
            return;
          }
          if (response.data.error) {
            error(response.data.error);
            return;
          }
          returnData = resultHandler(response.data.result);
          total = response.data.result.limits ? response.data.result.limits.total : null;
          deferred.resolve({
            data: returnData,
            total: total
          });
        };
        error = function(response) {
          console.error("ERROR - " + (new Date()));
          console.error(response);
          console.error("ERROR ---------------");
          deferred.reject(response);
        };
        $http.post("http://" + kodiRemote.settings.server + ":" + kodiRemote.settings.port + "/jsonrpc", payload).then(success, error);
        return deferred.promise;
      };
      return {
        fetch: fetch
      };
    }
  ]);

  app.service("SearchService", [
    "TvShows", "Movies", function(TvShows, Movies) {
      var service;
      service = {
        tvShows: [],
        movies: [],
        searching: false,
        reset: function() {
          this.tvShows = [];
          this.movies = [];
          return this.searching = false;
        },
        search: function(query) {
          var searchingMovies, searchingTvShows;
          if (!(query.length > 2)) {
            return;
          }
          searchingTvShows = true;
          searchingMovies = true;
          this.searching = searchingTvShows && searchingMovies;
          TvShows.where.title(query).then((function(_this) {
            return function(tvShowsData) {
              _this.tvShows = tvShowsData.data;
              searchingTvShows = false;
              return _this.searching = searchingTvShows && searchingMovies;
            };
          })(this));
          Movies.where.title(query).then((function(_this) {
            return function(moviesData) {
              _this.movies = moviesData.data;
              searchingMovies = true;
              return _this.searching = searchingTvShows && searchingMovies;
            };
          })(this));
        }
      };
      return service;
    }
  ]);

}).call(this);
