// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module("kodiRemote.services", []);

  app.service("Topbar", [
    function() {
      var service;
      service = {
        item: null,
        setTitle: function(title) {
          return this.item = {
            type: "title",
            title: title
          };
        },
        setLink: function(url, label) {
          return this.item = {
            type: "link",
            url: url,
            label: label
          };
        }
      };
      return service;
    }
  ]);

  app.service("KodiRequest", [
    "$q", "$http", function($q, $http) {
      var methodRequest, perPage, request, service;
      request = function(payload) {
        var deferred, error, success;
        deferred = $q.defer();
        success = function(response) {
          if (!response.data) {
            deferred.reject(response);
          }
          if (response.data.error) {
            deferred.reject(response.data.error);
          }
          deferred.resolve(response.data.result);
        };
        error = function(response) {
          console.debug(error(response));
          deferred.reject(response);
        };
        $http.post("http://" + kodiRemote.settings.server + ":" + kodiRemote.settings.port + "/jsonrpc", payload).then(success, error);
        return deferred.promise;
      };
      methodRequest = function(method, params) {
        var payload;
        if (params == null) {
          params = {};
        }
        payload = {
          jsonrpc: "2.0",
          method: method,
          id: 1
        };
        if (params) {
          payload.params = params;
        }
        return request(payload);
      };
      perPage = 10;
      service = {
        methodRequest: methodRequest
      };
      return service;
    }
  ]);

  app.service("Remote", [
    "KodiRequest", function(KodiRequest) {
      var service;
      service = {
        Player: {
          activePlayers: function() {
            return KodiRequest.methodRequest("Player.GetActivePlayers", {});
          },
          playing: function(playerId) {
            var params;
            params = {
              playerid: playerId,
              properties: ["title", "showtitle", "year", "runtime", "season", "episode"]
            };
            return KodiRequest.methodRequest("Player.GetItem", params);
          },
          open: function(playlistId, position) {
            var params;
            params = [
              {
                playlistid: playlistId,
                position: position
              }, {
                resume: true
              }
            ];
            return KodiRequest.methodRequest("Player.Open", params);
          },
          stop: function() {
            return KodiRequest.methodRequest("Player.Stop", [1]);
          },
          playPause: function(playerId) {
            return KodiRequest.methodRequest("Player.PlayPause", [playerId]);
          },
          properties: function(playerId) {
            var params;
            return KodiRequest.methodRequest("Player.GetProperties", params = [playerId, ["percentage", "time", "subtitles", "audiostreams"]]);
          },
          setSubtitle: function(playerId, subtitle) {
            var params;
            return KodiRequest.methodRequest("Player.SetSubtitle", params = [playerId, subtitle]);
          },
          setAudioStream: function(playerId, audiostream) {
            var params;
            return KodiRequest.methodRequest("Player.SetAudioStream", params = [playerId, audiostream]);
          },
          seek: function(playerId, percentage) {
            var params;
            return KodiRequest.methodRequest("Player.Seek", params = [playerId, percentage]);
          }
        },
        Playlist: {
          clear: function() {
            return KodiRequest.methodRequest("Playlist.Clear", [1]);
          },
          addEpisode: function(episodeId) {
            return KodiRequest.methodRequest("Playlist.Add", [
              1, {
                episodeid: episodeId
              }
            ]);
          },
          addMovie: function(movieId) {
            return KodiRequest.methodRequest("Playlist.Add", [
              1, {
                movieid: movieId
              }
            ]);
          }
        },
        playEpisode: function(episodeId) {
          return this.Player.stop().then((function(_this) {
            return function() {
              return _this.Playlist.clear().then(function() {
                return _this.Playlist.addEpisode(episodeId).then(function() {
                  return _this.Player.open(1, 0);
                });
              });
            };
          })(this));
        },
        playMovie: function(movieId) {
          return this.Player.stop().then((function(_this) {
            return function() {
              return _this.Playlist.clear().then(function() {
                return _this.Playlist.addMovie(movieId).then(function() {
                  return _this.Player.open(1, 0);
                });
              });
            };
          })(this));
        }
      };
      return service;
    }
  ]);

  app.service("SearchService", [
    "TvShows", "Movies", function(TvShows, Movies) {
      var service;
      service = {
        tvShows: [],
        movies: [],
        searching: false,
        reset: function() {
          this.tvShows = [];
          this.movies = [];
          return this.searching = false;
        },
        search: function(query) {
          var searchingMovies, searchingTvShows;
          if (!(query.length > 2)) {
            return;
          }
          searchingTvShows = true;
          searchingMovies = true;
          this.searching = searchingTvShows && searchingMovies;
          TvShows.search(query).then((function(_this) {
            return function(data) {
              _this.tvShows = data.tvshows;
              searchingTvShows = false;
              return _this.searching = searchingTvShows && searchingMovies;
            };
          })(this));
          Movies.search(query).then((function(_this) {
            return function(data) {
              _this.movies = data.movies;
              searchingMovies = true;
              return _this.searching = searchingTvShows && searchingMovies;
            };
          })(this));
        }
      };
      return service;
    }
  ]);

}).call(this);
