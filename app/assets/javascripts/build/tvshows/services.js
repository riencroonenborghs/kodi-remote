// Generated by CoffeeScript 1.9.3
(function() {
  var app;

  app = angular.module("kodiRemote.tvshows.services", []);

  app.service("TvShows", [
    "Request", "Seasons", function(Request, Seasons) {
      var allResultHandler, getResultHandler, properties, service;
      properties = ["title", "genre", "year", "rating", "plot", "studio", "mpaa", "cast", "playcount", "episode", "imdbnumber", "premiered", "thumbnail", "season", "watchedepisodes"];
      allResultHandler = function(result) {
        var i, len, ref, show;
        ref = result.tvshows || [];
        for (i = 0, len = ref.length; i < len; i++) {
          show = ref[i];
          show.type = "tvShow";
          show.seasons = function() {
            return Seasons.all(this.tvshowid);
          };
        }
        return result.tvshows || [];
      };
      getResultHandler = function(result) {
        result.tvshowdetails.type = "tvShow";
        result.tvshowdetails.seasons = function() {
          return Seasons.all(this.tvshowid);
        };
        return result.tvshowdetails;
      };
      service = {
        perPage: 5,
        where: {
          title: function(query) {
            var params;
            params = {
              properties: properties,
              filter: {
                field: "title",
                operator: "contains",
                value: query
              }
            };
            return Request.fetch("VideoLibrary.GetTVShows", allResultHandler, params);
          }
        },
        all: function(pageParams, sortParams) {
          var params;
          if (pageParams == null) {
            pageParams = 1;
          }
          if (sortParams == null) {
            sortParams = {
              by: "label",
              direction: "ascending"
            };
          }
          params = {
            properties: properties,
            sort: {
              method: sortParams.by,
              order: sortParams.direction
            },
            limits: {
              start: (pageParams - 1) * this.perPage,
              end: pageParams * this.perPage
            }
          };
          return Request.fetch("VideoLibrary.GetTVShows", allResultHandler, params);
        },
        get: function(tvShowId) {
          var params;
          params = {
            tvshowid: tvShowId,
            properties: properties
          };
          return Request.fetch("VideoLibrary.GetTVShowDetails", getResultHandler, params);
        }
      };
      return service;
    }
  ]);

  app.service("Seasons", [
    "Request", "Episodes", function(Request, Episodes) {
      var properties, resultHandler, service;
      properties = ["season", "playcount", "episode", "thumbnail", "tvshowid", "watchedepisodes"];
      resultHandler = function(result) {
        var i, len, ref, season;
        ref = result.seasons || [];
        for (i = 0, len = ref.length; i < len; i++) {
          season = ref[i];
          season.type = "season";
          season.episodes = function() {
            return Episodes.all(this.tvshowid, this.season);
          };
        }
        return result.seasons || [];
      };
      service = {
        all: function(tvShowId) {
          var params;
          params = {
            tvshowid: tvShowId,
            properties: properties
          };
          return Request.fetch("VideoLibrary.GetSeasons", resultHandler, params);
        }
      };
      return service;
    }
  ]);

  app.service("Episodes", [
    "Request", function(Request) {
      var properties, resultHandler, service;
      properties = ["title", "plot", "rating", "writer", "firstaired", "playcount", "runtime", "director", "season", "episode", "cast", "thumbnail", "resume"];
      resultHandler = function(result) {
        var episode, i, len, ref;
        ref = result.episodes || [];
        for (i = 0, len = ref.length; i < len; i++) {
          episode = ref[i];
          episode.type = "episode";
        }
        return result.episodes || [];
      };
      service = {
        all: function(tvShowId, season) {
          var params;
          params = {
            tvshowid: tvShowId,
            season: season,
            properties: properties
          };
          return Request.fetch("VideoLibrary.GetEpisodes", resultHandler, params);
        }
      };
      return service;
    }
  ]);

}).call(this);
